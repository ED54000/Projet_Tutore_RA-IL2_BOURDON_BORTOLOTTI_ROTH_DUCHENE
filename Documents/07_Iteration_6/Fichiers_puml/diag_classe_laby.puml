@startuml


class ControllerLearn {
  + ControllerLearn(ModeleLabyrinth): 
  + handle(MouseEvent): void
}
class ControllerNextManche {
  + ControllerNextManche(ModeleLabyrinth): 
  + handle(MouseEvent): void
}
class ControllerSimpleMode {
  + ControllerSimpleMode(ModeleLabyrinth, ViewLabyrinth, ToggleButton): 
  + handle(MouseEvent): void
}
class ModeleLabyrinth {
  + ModeleLabyrinth(): 
  - pause: boolean
  + defenses: ArrayList<Defense>
  - Ystart: int
  ~ screenSize: Dimension
  - ennemiesEvolved: ArrayList<Giant>
  - YstartRender: int
  - nbManches: int
  - simulationEvolution: boolean
  - XArrival: int
  - XstartRender: int
  - startTime: long
  - cases: char[][]
  - endTime: long
  - YArrival: int
  + START: char
  - end: boolean
  - Xstart: int
  - logs: String
  - simulation: boolean
  - useAstar: boolean
  + deleteObserver(Observer): void
  - hasReachedArrival(Ennemy): boolean
  + getCloserEnnemy(ActiveDefense): Ennemy
  + towerIsDestroyed(): void
  + creerLabyrinthePour1(String, int): void
  - handleDruideCombat(Ennemy, double): void
  - handleBerserkerCombat(Ennemy, double): void
  + etreFini(): boolean
  + refreshEnnemyEndOfManche(): void
  - updateCombat(double): void
  - handlePassiveDefenseCombat(PassiveDefense, double): void
  - removeDeadEntities(): void
  + getCase(int, int): char
  - handleActiveDefenseCombat(ActiveDefense, double): void
  + registerObserver(Observer): void
  - handleEndOfManche(): void
  - updateEnemyPositions(): void
  - handleNormalEnemyCombat(Ennemy, double): void
  + setEndTime(): void
  + setStartTime(): void
  - calculateFinalDistances(): void
  - handleSimulation(): void
  + refreshDeadEnemies(): void
  + refresh(int): void
  + update(double): void
  + getNewHealerAStar(int, int, int): ArrayList<Vector2D>
  + creerLabyrinthe(String, ArrayList<Ennemy>, int, int): void
  + refreshDefenseEndOfManche(): void
  - handleEnemyArrival(Ennemy): void
  + refreshDeadDefenses(): void
  + moveEnemyToClosestValidPoint(char[][], int, int): int[]
  + createEnnemies(int): ArrayList<Ennemy>
  + refreshEnnemiesScore(): void
  + refreshEnnemyArrived(): void
  + init(Canvas): void
  + updateSprite(Ennemy): void
  + notifyObserver(): void
   lengthY: int
   logs: String
   ennemiesEvolved: ArrayList<Giant>
   labyrinth: ModeleLabyrinth
   score: HashMap
   endTime: long
   defenses: ArrayList<Defense>
   simulationEvolution: boolean
   cases: char[][]
   START: Vector2D
   pause: boolean
   simulation: boolean
   Xstart: double
   length: int
   YArrival: double
   allEnnemiesStats: ArrayList<Ennemy>
   end: boolean
   Ystart: double
   XArrival: double
   useAstar: boolean
   startTime: long
   nbManches: int
   screenSize: Dimension
   tailleCase: int
   YstartRender: int
   XstartRender: int
   ennemyEndOfManche: ArrayList<Ennemy>
   defenseEndOfManche: ArrayList<Defense>
}
interface Observer << interface >> {
  + update(Subject): void
}
interface Subject << interface >> {
  + notifyObserver(): void
  + registerObserver(Observer): void
  + deleteObserver(Observer): void
}
class ViewLabyrinth {
  + ViewLabyrinth(ModeleLabyrinth, Canvas): 
  - images: Map<Character, Image>
  - dessinerJeu(ModeleLabyrinth, Canvas): void
  - renderEnnemi(GraphicsContext, Ennemy, <color:red>ArrayList<Vector2D>, Color </color>): void
  + update(Subject): void
  - dessinerCase(GraphicsContext, char, int, int): void
   images: Map<Character, Image>
}
class ViewLogs {
  + ViewLogs(ModeleLabyrinth, VBox): 
  - mettreAJourEnnemies(String): void
  + update(Subject): void
  - formatterEnnemy(Ennemy): String
}

ControllerLearn       -[dashed]->  ControllerNextManche : "«create»"
ControllerLearn      "1" *--> "laby\n1" ModeleLabyrinth      
ControllerNextManche "1" *--> "laby\n1" ModeleLabyrinth      
ModeleLabyrinth      "1" *--> "observateurs\n*" Observer             
ModeleLabyrinth       -[dashed]-^  Subject              
ViewLabyrinth        "1" *---> "laby\n1" ModeleLabyrinth      
ViewLabyrinth         -[dashed]-^  Observer             
ViewLogs              -[dashed]->  ControllerLearn      : "«create»"
ViewLogs             "1" *---> "laby\n1" ModeleLabyrinth      
ViewLogs              -[dashed]-^  Observer                
@enduml
